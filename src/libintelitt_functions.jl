# readelf -Ws libittnotify/libittnotify.so | grep "__itt" | awk '{ print $8 }' | sort -u > syms.list
# syms = readlines("syms.list")
# functions = readlines("functions.list")
# for x in [ (f in syms ? :mkfn : f * "_ptr__3_0" in syms ? :mkfnptr : :unknown) => f for f in functions ]; println(x); end

@mkfnptr(__itt_pause, Cvoid, ())
@mkfnptr(__itt_resume, Cvoid, ())
@mkfnptr(__itt_detach, Cvoid, ())
@mkfnptr(__itt_pt_region_create, __itt_pt_region, (Cstring,), name)
@mkfn(   __itt_mark_pt_region_begin, Cvoid, (__itt_pt_region,), region)
@mkfn(   __itt_mark_pt_region_end, Cvoid, (__itt_pt_region,), region)
@mkfnptr(__itt_thread_set_name, Cvoid, (Cstring,), name)
@mkfnptr(__itt_thread_ignore, Cvoid, ())
@mkfnptr(__itt_suppress_push, Cvoid, (UInt32,), mask)
@mkfnptr(__itt_suppress_pop, Cvoid, ())
@mkfnptr(__itt_suppress_mark_range, Cvoid, (__itt_suppress_mode_t, UInt32, Ptr{Cvoid}, Csize_t), mode, mask, address, size)
@mkfnptr(__itt_suppress_clear_range, Cvoid, (__itt_suppress_mode_t, UInt32, Ptr{Cvoid}, Csize_t), mode, mask, address, size)
@mkfnptr(__itt_sync_create, Cvoid, (Ptr{Cvoid}, Cstring, Cstring, Cint), addr, objtype, objname, attribute)
@mkfnptr(__itt_sync_rename, Cvoid, (Ptr{Cvoid}, Cstring), addr, name)
@mkfnptr(__itt_sync_destroy, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_sync_prepare, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_sync_cancel, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_sync_acquired, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_sync_releasing, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_fsync_prepare, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_fsync_cancel, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_fsync_acquired, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_fsync_releasing, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_model_site_begin, Cvoid, (Ptr{__itt_model_site}, Ptr{__itt_model_site_instance}, Cstring), site, instance, name)
@mkfnptr(__itt_model_site_beginA, Cvoid, (Cstring,), name)
@mkfnptr(__itt_model_site_beginAL, Cvoid, (Cstring, Csize_t), name, siteNameLen)
@mkfnptr(__itt_model_site_end, Cvoid, (Ptr{__itt_model_site}, Ptr{__itt_model_site_instance}), site, instance)
@mkfnptr(__itt_model_site_end_2, Cvoid, ())
@mkfnptr(__itt_model_task_begin, Cvoid, (Ptr{__itt_model_task}, Ptr{__itt_model_task_instance}, Cstring), task, instance, name)
@mkfnptr(__itt_model_task_beginA, Cvoid, (Cstring,), name)
@mkfnptr(__itt_model_task_beginAL, Cvoid, (Cstring, Csize_t), name, taskNameLen)
@mkfnptr(__itt_model_iteration_taskA, Cvoid, (Cstring,), name)
@mkfnptr(__itt_model_iteration_taskAL, Cvoid, (Cstring, Csize_t), name, taskNameLen)
@mkfnptr(__itt_model_task_end, Cvoid, (Ptr{__itt_model_task}, Ptr{__itt_model_task_instance}), task, instance)
@mkfnptr(__itt_model_task_end_2, Cvoid, ())
@mkfnptr(__itt_model_lock_acquire, Cvoid, (Ptr{Cvoid},), lock)
@mkfnptr(__itt_model_lock_acquire_2, Cvoid, (Ptr{Cvoid},), lock)
@mkfnptr(__itt_model_lock_release, Cvoid, (Ptr{Cvoid},), lock)
@mkfnptr(__itt_model_lock_release_2, Cvoid, (Ptr{Cvoid},), lock)
@mkfnptr(__itt_model_record_allocation, Cvoid, (Ptr{Cvoid}, Csize_t), addr, size)
@mkfnptr(__itt_model_record_deallocation, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_model_induction_uses, Cvoid, (Ptr{Cvoid}, Csize_t), addr, size)
@mkfnptr(__itt_model_reduction_uses, Cvoid, (Ptr{Cvoid}, Csize_t), addr, size)
@mkfnptr(__itt_model_observe_uses, Cvoid, (Ptr{Cvoid}, Csize_t), addr, size)
@mkfnptr(__itt_model_clear_uses, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_model_disable_push, Cvoid, (__itt_model_disable,), x)
@mkfnptr(__itt_model_disable_pop, Cvoid, ())
@mkfnptr(__itt_model_aggregate_task, Cvoid, (Csize_t,), x)
# @unknown(create, Cvoid, ())
@mkfnptr(__itt_heap_internal_access_end, Cvoid, ())
@mkfnptr(__itt_heap_record_memory_growth_begin, Cvoid, ())
@mkfnptr(__itt_heap_record_memory_growth_end, Cvoid, ())
@mkfnptr(__itt_heap_reset_detection, Cvoid, (UInt32,), reset_mask)
@mkfnptr(__itt_heap_record, Cvoid, (UInt32,), record_mask)
@mkfnptr(__itt_domain_create, Ptr{__itt_domain}, (Cstring,), name)
# @mkfnptr(__itt_id_make, __itt_id, (Ptr{Cvoid}, Culonglong), addr, extra)
# @mkfnptr(__itt_id_make, __itt_id, (Ptr{Cvoid}, Culonglong), addr, extra)
__itt_id_make(addr::Ptr{Cvoid}, extra::Culonglong)::__itt_id = __itt_id(Culonglong(addr),extra,Culonglong(0))
@mkfnptr(__itt_id_create, Cvoid, (Ptr{__itt_domain}, __itt_id), domain, id)
@mkfnptr(__itt_id_destroy, Cvoid, (Ptr{__itt_domain}, __itt_id), domain, id)
@mkfnptr(__itt_string_handle_create, Ptr{__itt_string_handle}, (Cstring,), name)
@mkfnptr(__itt_get_timestamp, __itt_timestamp, ())
@mkfnptr(__itt_region_begin, Cvoid, (Ptr{__itt_domain}, __itt_id, __itt_id, Ptr{__itt_string_handle}), domain, id, parentid, name)
@mkfnptr(__itt_region_end, Cvoid, (Ptr{__itt_domain}, __itt_id), domain, id)
@mkfnptr(__itt_frame_begin_v3, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_id}), domain, id)
@mkfnptr(__itt_frame_end_v3, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_id}), domain, id)
@mkfnptr(__itt_frame_submit_v3, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_id}, __itt_timestamp, __itt_timestamp), domain, id, _begin, _end)
@mkfnptr(__itt_task_group, Cvoid, (Ptr{__itt_domain}, __itt_id, __itt_id, Ptr{__itt_string_handle}), domain, id, parentid, name)
@mkfnptr(__itt_task_begin, Cvoid, (Ptr{__itt_domain}, __itt_id, __itt_id, Ptr{__itt_string_handle}), domain, taskid, parentid, name)
@mkfnptr(__itt_task_begin_fn, Cvoid, (Ptr{__itt_domain}, __itt_id, __itt_id, Ptr{Cvoid}), domain, taskid, parentid, fn)
@mkfnptr(__itt_task_end, Cvoid, (Ptr{__itt_domain},), domain)
@mkfnptr(__itt_task_begin_overlapped, Cvoid, (Ptr{__itt_domain}, __itt_id, __itt_id, Ptr{__itt_string_handle}), domain, taskid, parentid, name)
@mkfnptr(__itt_task_end_overlapped, Cvoid, (Ptr{__itt_domain}, __itt_id), domain, taskid)
@mkfnptr(__itt_marker, Cvoid, (Ptr{__itt_domain}, __itt_id, Ptr{__itt_string_handle}, __itt_scope), domain, id, name, scope)
@mkfnptr(__itt_metadata_add, Cvoid, (Ptr{__itt_domain}, __itt_id, Ptr{__itt_string_handle}, __itt_metadata_type, Csize_t, Ptr{Cvoid}), domain, id, key, type, count, data)
@mkfnptr(__itt_metadata_str_add, Cvoid, (Ptr{__itt_domain}, __itt_id, Ptr{__itt_string_handle}, Cstring, Csize_t), domain, id, key, data, length)
@mkfnptr(__itt_metadata_add_with_scope, Cvoid, (Ptr{__itt_domain}, __itt_scope, Ptr{__itt_string_handle}, __itt_metadata_type, Csize_t, Ptr{Cvoid}), domain, scope, key, type, count, data)
@mkfnptr(__itt_metadata_str_add_with_scope, Cvoid, (Ptr{__itt_domain}, __itt_scope, Ptr{__itt_string_handle}, Cstring, Csize_t), domain, scope, key, data, length)
@mkfnptr(__itt_relation_add_to_current, Cvoid, (Ptr{__itt_domain}, __itt_relation, __itt_id), domain, relation, tail)
@mkfnptr(__itt_relation_add, Cvoid, (Ptr{__itt_domain}, __itt_id, __itt_relation, __itt_id), domain, head, relation, tail)
@mkfnptr(__itt_clock_domain_create, Ptr{__itt_clock_domain}, (__itt_get_clock_info_fn, Ptr{Cvoid}), fn, fn_data)
@mkfnptr(__itt_clock_domain_reset, Cvoid, ())
@mkfnptr(__itt_id_create_ex, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_clock_domain}, Culonglong, __itt_id), domain, clock_domain, timestamp, id)
@mkfnptr(__itt_id_destroy_ex, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_clock_domain}, Culonglong, __itt_id), domain, clock_domain, timestamp, id)
@mkfnptr(__itt_task_begin_ex, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_clock_domain}, Culonglong, __itt_id, __itt_id, Ptr{__itt_string_handle}), domain, clock_domain, timestamp, taskid, parentid, name)
@mkfnptr(__itt_task_begin_fn_ex, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_clock_domain}, Culonglong, __itt_id, __itt_id, Ptr{Cvoid}), domain, clock_domain, timestamp, taskid, parentid, fn)
@mkfnptr(__itt_task_end_ex, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_clock_domain}, Culonglong), domain, clock_domain, timestamp)
@mkfnptr(__itt_counter_create, __itt_counter, (Cstring, Cstring), name, domain)
@mkfnptr(__itt_counter_inc, Cvoid, (__itt_counter,), id)
@mkfnptr(__itt_counter_inc_delta, Cvoid, (__itt_counter, Culonglong), id, value)
@mkfnptr(__itt_counter_dec, Cvoid, (__itt_counter,), id)
@mkfnptr(__itt_counter_dec_delta, Cvoid, (__itt_counter, Culonglong), id, value)
@mkfnptr(__itt_counter_inc_v3, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_string_handle}), domain, name)
@mkfnptr(__itt_counter_inc_delta_v3, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_string_handle}, Culonglong), domain, name, delta)
@mkfnptr(__itt_counter_dec_v3, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_string_handle}), domain, name)
@mkfnptr(__itt_counter_dec_delta_v3, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_string_handle}, Culonglong), domain, name, delta)
@mkfnptr(__itt_counter_set_value, Cvoid, (__itt_counter, Ptr{Cvoid}), id, value_ptr)
@mkfnptr(__itt_counter_set_value_ex, Cvoid, (__itt_counter, Ptr{__itt_clock_domain}, Culonglong, Ptr{Cvoid}), id, clock_domain, timestamp, value_ptr)
@mkfnptr(__itt_counter_create_typed, __itt_counter, (Cstring, Cstring, __itt_metadata_type), name, domain, type)
@mkfnptr(__itt_counter_destroy, Cvoid, (__itt_counter,), id)
@mkfnptr(__itt_marker_ex, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_clock_domain}, Culonglong, __itt_id, Ptr{__itt_string_handle}, __itt_scope), domain, clock_domain, timestamp, id, name, scope)
@mkfnptr(__itt_relation_add_to_current_ex, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_clock_domain}, Culonglong, __itt_relation, __itt_id), domain, clock_domain, timestamp, relation, tail)
@mkfnptr(__itt_relation_add_ex, Cvoid, (Ptr{__itt_domain}, Ptr{__itt_clock_domain}, Culonglong, __itt_id, __itt_relation, __itt_id), domain, clock_domain, timestamp, head, relation, tail)
@mkfnptr(__itt_track_group_create, Ptr{__itt_track_group}, (Ptr{__itt_string_handle}, __itt_track_group_type), name, track_group_type)
@mkfnptr(__itt_track_create, Ptr{__itt_track}, (Ptr{__itt_track_group}, Ptr{__itt_string_handle}, __itt_track_type), track_group, name, track_type)
@mkfnptr(__itt_set_track, Cvoid, (Ptr{__itt_track},), track)
@mkfnptr(__itt_event_create, __itt_event, (Cstring, Cint), name, namelen)
@mkfnptr(__itt_event_start, Cint, (__itt_event,), event)
@mkfnptr(__itt_event_end, Cint, (__itt_event,), event)
@mkfnptr(__itt_av_save, Cint, (Ptr{Cvoid}, Cint, Ptr{Cint}, Cint, Cstring, Cint), data, rank, dimensions, type, filePath, columnOrder)
@mkfnptr(__itt_enable_attach, Cvoid, ())
@mkfnptr(__itt_module_load, Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Cstring), start_addr, end_addr, path)
@mkfnptr(__itt_module_unload, Cvoid, (Ptr{Cvoid},), addr)
@mkfnptr(__itt_module_load_with_sections, Cvoid, (Ptr{__itt_module_object},), module_obj)
@mkfnptr(__itt_module_unload_with_sections, Cvoid, (Ptr{__itt_module_object},), module_obj)